{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "&#21015;&#34920;&#19982;&#20803;&#32452; . # 切片 lst = [1,2,3,4,5,6,7,8,9,0] print(lst[2:5]) # 切片可以理解成列表的值区间，且是一个左闭右开区间，这里lst[2:5]代表的区间是：索引2的值 - 索引4的值 print(lst[:5]) # 左边无索引，代表从索引0开始 print(lst[4:]) # 右边无索引，代表以最后一个值结束 print(lst[5:-1]) # 索引5的值 - 倒数第二个值 （切片是右闭区间，注意了） . [3, 4, 5] [1, 2, 3, 4, 5] [5, 6, 7, 8, 9, 0] [6, 7, 8, 9] . # 步长 lst = [1,2,3,4,5,6,7,8,9,0] print(lst[0:5:2]) # List[i:j:n]代表：索引i - 索引j，以n为步长 print(lst[::2]) # 按照2为步长，从第一个值开始截取lst数据 print(lst[1::2]) # 按照2为步长，从第二个值开始截取lst数据 . [1, 3, 5] [1, 3, 5, 7, 9] [2, 4, 6, 8, 0] . # 序列的基本内置全局函数 lst = [1,2,3,4,5,6,7,8,9,0] print(len(lst)) # 列表元素个数 print(max(lst),min(lst),sum(lst)) # 返回列表的最大值、最小值、求和，这三个函数都只针对数字的list print(lst.index(3)) # .index(obj)方法：从列表中找出某个值第一个匹配项的索引位置 lst = [1,1,2,3,3,4,4,4,4,5,6] print(lst.count(4)) # .count(obj)方法：计算值的出现次数 . 10 9 0 45 2 4 . # 列表与生成器 print(range(5),type(range(5))) # range()是生成器，指向了一个范围 # range(5)代表指向了0,1,2,3,4这几个值 # range(2,5)代表指向了2,3,4这几个值，注意这里不是使用: # range(0,10,2)代表指向了0,2,4,6,8这几个值，最后的2代表步长 lst = list(range(5)) print(lst) # 通过list()函数生成列表 . range(0, 5) &lt;class &#39;range&#39;&gt; [0, 1, 2, 3, 4] . # 可变列表list常用操作 - 添加元素 lst = list(range(10)) lst.append(&#39;hello&#39;) print(lst) # list.append() 添加元素 lst.append([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]) print(lst) lst.extend([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]) print(lst) # 添加多个元素用.extend()方法：用新列表扩展原来的列表，注意和append()方法的区别 . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &#39;hello&#39;] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &#39;hello&#39;, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &#39;hello&#39;, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], &#39;a&#39;, &#39;b&#39;, &#39;c&#39;] . # 可变列表list常用操作 - 删除元素 lst = [&#39;Jack&#39;,&#39;Jack&#39;,&#39;Tom&#39;,&#39;Tracy&#39;,&#39;Alex&#39;,&#39;White&#39;] lst.remove(&#39;Jack&#39;) print(lst) # .remove方法：移除列表中某个值的第一个匹配项 del lst[3:5] print(lst) # del语句：删除list的相应索引值 lst.clear() print(lst) # 移除所有值 . [&#39;Jack&#39;, &#39;Tom&#39;, &#39;Tracy&#39;, &#39;Alex&#39;, &#39;White&#39;] [&#39;Jack&#39;, &#39;Tom&#39;, &#39;Tracy&#39;] [] . # 可变列表list常用操作 - 插入元素 lst = list(range(10)) print(lst) lst.insert(3,&#39;a&#39;) print(lst) # x.insert(i,m)方法：在索引i处插入m，这里索引3代表第四个值 lst.insert(5,[1,2,3]) print(lst) # 插入一个列表元素 . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] [0, 1, 2, &#39;a&#39;, 3, 4, 5, 6, 7, 8, 9] [0, 1, 2, &#39;a&#39;, 3, [1, 2, 3], 4, 5, 6, 7, 8, 9] . # 可变列表list常用操作 - 复制 lst = list(range(10)) lst1 = lst lst1[2] = &#39;hello&#39; print(lst,lst1) # lst，lst1指向同一个列表 lst = list(range(10)) lst2 = lst.copy() lst2[2] = &#39;hello&#39; print(lst,lst2) # list.copy()方法：复制一个新的列表，lst，lst2指向两个列表（虽然两个列表值相同） . [0, 1, &#39;hello&#39;, 3, 4, 5, 6, 7, 8, 9] [0, 1, &#39;hello&#39;, 3, 4, 5, 6, 7, 8, 9] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] [0, 1, &#39;hello&#39;, 3, 4, 5, 6, 7, 8, 9] . # 可变列表list常用操作 - 排序 lst1 = [12,45,32,98,45,66,3] lst2 = [&quot;asd&quot;, &quot;cxv&quot;, &quot;ghv&quot;] lst1.sort() lst2.sort() print(lst1,lst2) # 默认升序排序/字母顺序 lst1.sort(reverse=True) lst2.sort(reverse=True) print(lst1,lst2) # 参数reverse：反向排序，针对数字 lst3 = sorted(lst1) lst3.append(&#39;hello&#39;) print(lst1,lst3) # 函数sorted():排序并复制 . [3, 12, 32, 45, 45, 66, 98] [&#39;asd&#39;, &#39;cxv&#39;, &#39;ghv&#39;] [98, 66, 45, 45, 32, 12, 3] [&#39;ghv&#39;, &#39;cxv&#39;, &#39;asd&#39;] [98, 66, 45, 45, 32, 12, 3] [3, 12, 32, 45, 45, 66, 98, &#39;hello&#39;] . # 讲一讲元祖tuple ：不可变的“列表” tup1 = (&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000); tup2 = (1, 2, 3, 4, 5 ); tup3 = &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; # 可以不加括号 tup4 = (50,) # 元组中只包含一个元素时，需要在元素后面添加逗号 print(tup1[2],tup3[:2]) # 索引、切片和list一样 del tup3 # 元祖不能单独删除内部元素（不可变性），但可以del语句来删除整个元祖 #print(tup3) print(len(tup1)) print(tup1 + tup2) print(tup4 * 3) print(max(tup2),min(tup2)) # 序列通用函数 lst = list(range(10)) tup5 = tuple(lst) print(tup5) # tuple()函数：将列表转换为元组 . 1997 (&#39;a&#39;, &#39;b&#39;) 4 (&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000, 1, 2, 3, 4, 5) (50, 50, 50) 5 1 (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) . &#23383;&#31526;&#20018;&#25805;&#20316; . # 字符串引号 str1 = &quot;abc&quot; str2 = &#39;abc&#39; str3 = &#39;my name is &quot;fatbird&quot;&#39; # 双引号单引号无区别，但文本中有引号的时候要相互交替使用 str4 = &#39;&#39;&#39;hello! how are you? I`m fine, thank you.&#39;&#39;&#39; # 需要多行字符串时候用三引号 &#39;&#39;&#39; &#39;&#39;&#39;,&quot;&quot;&quot; &quot;&quot;&quot; . # 序列通用功能 print(&#39;a&#39; in &#39;abc&#39;) # in/not in ：判断是否存在 print(&#39;我很帅&#39; + &quot;没错&quot;) # 文本连接 print(&#39;handsome &#39;*4) # 文本复制 st = &#39;abcdefg&#39; print(st[2],st[-1]) print(st[:2]) print(st[::2]) # 索引、切片、步长 print(st.index(&#39;g&#39;)) # .index()方法 print(&#39;st长度为：&#39;,len(st)) # 计算字符串长度（思考这里能否把逗号换为&quot;+&quot;） . True 我很帅没错 handsome handsome handsome handsome c g ab aceg 6 st长度为： 7 . # 字符串常用功能 st = &quot;i`m handsome!&quot; st2 = st.replace(&#39;handsome&#39;,&#39;ugly&#39;) print(st) print(st2) st = &#39;hahaha&#39; st2 = st.replace(&#39;ha&#39;,&#39;he&#39;,2) print(st2) # str.replace(old,new,count)：修改字符串，count：更换几个 st = &quot;poi01,116.446238,39.940166&quot; lst = st.split(&#39;,&#39;) print(lst) # str.split(obj)：拆分字符串，生成列表 lst = [&#39;poi01&#39;, &#39;116.446238&#39;, &#39;39.940166&#39;] m = &#39;-&#39; st = m.join(lst) print(st) # str.join()：连接字符串，对象为列表 st = &#39;abcdefg&#39; print(st.startswith(&#39;a&#39;), st.endswith(&#39;f&#39;)) # str.startswith(“str”) 判断是否以“str”开头；str.endswith (“str”) 判断是否以“str”结尾 st = &#39;aBDEAjc kLM&#39; print(st.upper()) # 全部大写 print(st.lower()) # 全部小写 print(st.swapcase()) # 大小写互换 print(st.capitalize()) # 首字母大写 st = &#39;1234567&#39; print(st.isnumeric()) # 如果 string 只包含数字则返回 True,否则返回 False. st = &#39;DNVAK&#39; print(st.isalpha()) # 如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False st = &#39;avd &#39; print(st.rstrip()) # 删除字符末尾的空格 . i`m handsome! i`m ugly! heheha [&#39;poi01&#39;, &#39;116.446238&#39;, &#39;39.940166&#39;] poi01-116.446238-39.940166 True False ABDEAJC KLM abdeajc klm AbdeaJC Klm Abdeajc klm True True avd . # 格式化字符：在字符串中插入变量 name = &quot;FATBIRD&quot; truth = &quot;%s is 好人&quot; %name print(truth) # %s 表示我们这里要插入一个变量（字符串），%name代表这里我们插入name x = 4 y = &quot;hehe&quot; z = 4.2 print(&quot;this is %i&quot; %x) print(&quot;this is %s&quot; %y) print(&quot;this is %f&quot; %z) # i/s/f分别代表插入字符串的源数据类型：整型/字符型/浮点型 . FATBIRD is 好人 this is 4 this is hehe this is 4.200000 . # 格式化字符：数字格式化的那些坑 m = 3.1415926 print(&quot;pi is %f&quot; %m) print(&quot;pi is %.2f&quot; %m) # 我只想输出2位小数:%.2f，此处是四舍五入！ m = 10.6 print(&quot;pi is %i&quot; %m) print(&quot;pi is %.0f&quot; %m) # 区别：%i 不四舍五入，直接切掉小数部分 m = 100 print(&quot;have fun %+i&quot; %m) print(&quot;have fun %.2f&quot; % -0.01) # 显示正号，负号根据数字直接显示 m = 100 print(&quot;have fun % i&quot; %m) print(&quot;have fun % +i&quot; %m) print(&quot;have fun % .2f&quot; %-0.01) # 加空格，空格和正好只能显示一个 m = 123.123123123 print(&quot;have fun %.2e&quot; %m) print(&quot;have fun %.4E&quot; %m) # 科学计数法 %e %E m1 = 123.123123123 m2 = 1.2 print(&quot;have fun %g&quot; %m1) print(&quot;have fun %g&quot; %m2) # 小数位数少的时候自动识别用浮点数，数据复杂的时候自动识别用科学计数法 . pi is 3.141593 pi is 3.14 pi is 10 pi is 11 have fun +100 have fun -0.01 have fun 100 have fun +100 have fun -0.01 have fun 1.23e+02 have fun 1.2312E+02 have fun 123.123 have fun 1.2 . # 更强大的格式化方法.format print(&quot;User ID: {0}&quot;.format(&quot;root&quot;)) print(&quot;{} 呵呵 {}&quot;.format(&quot;a&quot;,&quot;b&quot;)) # {} 这里代表占位符，其中可以有数字也可以没有 print(&quot;{}{}{}&quot;.format(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;),&#39; n&#39;, &quot;{0}{1}{2}{0}&quot;.format(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;),&#39; n&#39;) #print(&quot;{}{}{}{}&quot;.format(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)) # {}和{0}的区别:都是占位符，后者有了明确指定 print(&quot;我的工作是{work}&quot;.format(work = &#39;设计&#39;)) # 也可以用变量来指示 x=&quot;abc{}&quot; a = x.format(&quot;def&quot;) print(a,x) # .format()生成新的值吗？？ print(&quot;{:f}&quot;.format(4.123),&#39; n&#39;, &quot;{:.2f}&quot;.format(4.123),&#39; n&#39;, &quot;{:e}&quot;.format(4.123),&#39; n&#39;, &quot;{:.0f}&quot;.format(99.9),&#39; n&#39;, &quot;{:%}&quot;.format(4.123),&#39; n&#39;, &quot;{:d}&quot;.format(10)) . User ID: root a 呵呵 b abc abca 我的工作是设计 abcdef abc{} 4.123000 4.12 4.123000e+00 100 412.300000% 10 . &#23383;&#20856; . # 字典的特点 dic = {&#39;a&#39;:1,&#39;b&#39;:2,&#39;c&#39;:3} # 键值对，一定共同出现，不能只有一个 dic = {&#39;a&#39;:1,&#39;a&#39;:2} print(dic) # 不允许同一个键出现两次：创建时如果同一个键被赋值两次，后一个值会被记住 dic = {&#39;var1&#39;:1, &#39;var2&#39;:&#39;hello&#39;, &#39;var3&#39;:[1,2,3], &#39;var4&#39;:{&#39;a&#39;:1,&#39;b&#39;:2}} # key必须是字符串，value则可以是任意对象：数值，字符串，序列，字典 print(dic) # 字典是一个无序集合 dic[&#39;var5&#39;] = &#39;添加一个值&#39; # 任意添加元素 dic[&#39;var4&#39;] = &#39;任意修改其中一个值&#39; # 任意修改元素 del dic[&#39;var1&#39;] # 任意删除元素 print(dic) dic.clear() # 清空词典所有条目 print(dic) del dic # 删除词典 #print(dic) . {&#39;a&#39;: 2} {&#39;var1&#39;: 1, &#39;var2&#39;: &#39;hello&#39;, &#39;var3&#39;: [1, 2, 3], &#39;var4&#39;: {&#39;a&#39;: 1, &#39;b&#39;: 2}} {&#39;var2&#39;: &#39;hello&#39;, &#39;var3&#39;: [1, 2, 3], &#39;var4&#39;: &#39;任意修改其中一个值&#39;, &#39;var5&#39;: &#39;添加一个值&#39;} {} . # 申明一个字典 dic = {&#39;a&#39;:1,&#39;b&#39;:2} # 最简单直接的方式，手动书写申明一个字典变量，注意是：不是= dic = dict(m = 10 ,n = &#39;aa&#39;, h = [1,2,3]) print(dic) # dict()函数 lst1=[(&quot;a&quot;,&quot;fff&quot;),(&quot;b&quot;,&quot;ggg&quot;)] lst2=[[&quot;c&quot;,1],[&quot;d&quot;,2]] lst3=((&quot;e&quot;,[1,2]),(&quot;f&quot;,[3,4])) dic1 = dict(lst1) dic2 = dict(lst2) dic3 = dict(lst3) print(dic1,dic2,dic3) # dict()由序列生成一个字典，嵌套序列，可以是list或者tuple keys = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] dic1 = dict.fromkeys(keys) dic2 = dict.fromkeys(keys, &#39;hello&#39;) print(dic1,dic2) # 只有key，直接生成一个字典 . {&#39;m&#39;: 10, &#39;n&#39;: &#39;aa&#39;, &#39;h&#39;: [1, 2, 3]} {&#39;a&#39;: &#39;fff&#39;, &#39;b&#39;: &#39;ggg&#39;} {&#39;c&#39;: 1, &#39;d&#39;: 2} {&#39;e&#39;: [1, 2], &#39;f&#39;: [3, 4]} {&#39;a&#39;: None, &#39;b&#39;: None, &#39;c&#39;: None} {&#39;a&#39;: &#39;hello&#39;, &#39;b&#39;: &#39;hello&#39;, &#39;c&#39;: &#39;hello&#39;} . # 字典常用操作 dic1 = {&quot;a&quot;:1, &quot;b&quot;:2} dic2 = {&quot;c&quot;:3, &quot;b&quot;:4} dic1.update(dic2) print(dic1,dic2) # dict.update()方法：更新/合并一个字典，把第二个字典合并到第一个字典，改变了第一个字典 a = {&#39;m&#39;:1 , &#39;n&#39;:2 , &#39;p&#39;:3} b = a a.update({&#39;q&#39;:4}) print(a,b) # 和序列的原理一样，a和b指向同一个字典，所以会一起更新 a = {&#39;m&#39;:1 , &#39;n&#39;:2 , &#39;p&#39;:3} b = a.copy() a.update({&#39;q&#39;:4}) print(a,b) # 通过.copy()方法，复制一个新的字典 print(len(a)) # 查看字典元素个数 print(&#39;m&#39; in a) print(1 in a) # in / not in ：判断是否包含，这里的判断对象是key . {&#39;a&#39;: 1, &#39;b&#39;: 4, &#39;c&#39;: 3} {&#39;c&#39;: 3, &#39;b&#39;: 4} {&#39;m&#39;: 1, &#39;n&#39;: 2, &#39;p&#39;: 3, &#39;q&#39;: 4} {&#39;m&#39;: 1, &#39;n&#39;: 2, &#39;p&#39;: 3, &#39;q&#39;: 4} {&#39;m&#39;: 1, &#39;n&#39;: 2, &#39;p&#39;: 3, &#39;q&#39;: 4} {&#39;m&#39;: 1, &#39;n&#39;: 2, &#39;p&#39;: 3} 4 True False . # 字典的元素访问 dic = {&#39;a&#39;:1, &quot;b&quot;:2, &quot;c&quot;:3} print(dic[&#39;a&#39;]) #print(dic[1]) # 不能用序列的索引方式 poi = {&#39;name&#39;:&#39;shop&#39;, &#39;city&#39;:&#39;shanghai&#39;, &#39;information&#39;:{&#39;address&#39;:&#39;somewhere&#39;, &#39;num&#39;:66663333}} print(poi[&#39;information&#39;][&#39;address&#39;]) # 对于嵌套字典，输出嵌套内容，通过重复指向来输出 print(poi.get(&#39;name&#39;)) print(poi.get(&#39;type&#39;,print(&#39;nothing&#39;))) # .get(key)方法：直接查看key的value，如果没有相应key则返回None，添加print参数可以多返回一个值 print(poi.keys(),type(poi.keys())) print(list(poi.keys())) # .keys()方法：输出字典所有key，注意这里的输出内容格式是视图，可以用list()得到key的列表，类似range() print(poi.values(),type(poi.values())) print(list(poi.values())) # .values()方法：输出字典所有values，原理同.keys()方法 print(poi.items(),type(poi.items())) print(list(poi.items())) # .items()方法：输出字典所有items（元素），原理同.keys()方法 . 1 somewhere shop nothing None dict_keys([&#39;name&#39;, &#39;city&#39;, &#39;information&#39;]) &lt;class &#39;dict_keys&#39;&gt; [&#39;name&#39;, &#39;city&#39;, &#39;information&#39;] dict_values([&#39;shop&#39;, &#39;shanghai&#39;, {&#39;address&#39;: &#39;somewhere&#39;, &#39;num&#39;: 66663333}]) &lt;class &#39;dict_values&#39;&gt; [&#39;shop&#39;, &#39;shanghai&#39;, {&#39;address&#39;: &#39;somewhere&#39;, &#39;num&#39;: 66663333}] dict_items([(&#39;name&#39;, &#39;shop&#39;), (&#39;city&#39;, &#39;shanghai&#39;), (&#39;information&#39;, {&#39;address&#39;: &#39;somewhere&#39;, &#39;num&#39;: 66663333})]) &lt;class &#39;dict_items&#39;&gt; [(&#39;name&#39;, &#39;shop&#39;), (&#39;city&#39;, &#39;shanghai&#39;), (&#39;information&#39;, {&#39;address&#39;: &#39;somewhere&#39;, &#39;num&#39;: 66663333})] . # 字典的元素遍历 poi = {&#39;name&#39;:&#39;shop&#39;, &#39;city&#39;:&#39;shanghai&#39;, &#39;information&#39;:{&#39;address&#39;:&#39;somewhere&#39;, &#39;num&#39;:66663333}} for key in poi.keys(): print(key) print(&#39;-&#39;) for value in poi.values(): print(value) print(&#39;-&#39;) for (k,v) in poi.items(): print(&#39;key为 %s, value为 %s&#39; %(k,v)) print(&#39;-&#39;) # for函数遍历 . name city information - shop shanghai {&#39;address&#39;: &#39;somewhere&#39;, &#39;num&#39;: 66663333} - key为 name, value为 shop key为 city, value为 shanghai key为 information, value为 {&#39;address&#39;: &#39;somewhere&#39;, &#39;num&#39;: 66663333} - . &#26465;&#20214;&#21028;&#26029; . # 输入函数 input() score = input(&#39;请输入成绩：&#39;) print(&#39;该学生成绩为：&#39; + score) print(type(score)) # 注意：input()返回结果都为字符串，如果需要变为数字则用到int()/float() . # 两种条件判断:if-else flag = False name = &#39;luren&#39; if name == &#39;python&#39;: # 判断变量否为&#39;python&#39; flag = True # 条件成立时设置标志为真 print( &#39;welcome boss&#39;) # 并输出欢迎信息 else: print(name) # 条件不成立时输出变量名称 . luren . # 单语句多条件判断：or and num = 5 if num &gt;= 0 and num &lt;= 10: print( &#39;hello&#39;) # 判断值是否在0~10之间 # 输出结果: hello num = 10 if num &lt; 0 or num &gt; 10: print( &#39;hello&#39;) else: print( &#39;undefine&#39;) # 判断值是否在小于0或大于10 # 输出结果: undefine num = 8 if (num &gt;= 0 and num &lt;= 5) or (num &gt;= 10 and num &lt;= 15): print( &#39;hello&#39;) else: print( &#39;undefine&#39;) # 判断值是否在0~5或者10~15之间 # 输出结果: undefine . hello undefine undefine . # while-else语句 count = 0 while count &lt; 5: print(count, &quot; is less than 5&quot;) count = count + 1 else: print(count, &quot; is not less than 5&quot;) # 逻辑和if-else一样 . 0 is less than 5 1 is less than 5 2 is less than 5 3 is less than 5 4 is less than 5 5 is not less than 5 . # pass语句 for letter in &#39;Python&#39;: if letter == &#39;h&#39;: pass print( &#39;当前字母 : h，但是我pass了&#39;) print( &#39;当前字母 :&#39;, letter) print( &quot;Good bye!&quot;) # pass是空语句，是为了保持程序结构的完整性。（不中断也不跳过） . 当前字母 : P 当前字母 : y 当前字母 : t 当前字母 : h，但是我pass了 当前字母 : h 当前字母 : o 当前字母 : n Good bye! . &#20989;&#25968; . # 关于retuen def f1(x): y = 2**x # 没有return def f2(x): y = 2**x return y # 含有return print(f1(2),f2(2)) # return语句退出函数，并返回一个表达式。不带参数值的return语句返回None . None 4 . # 默认参数 def f(x,n = 2): return(x**n) print(f(10)) print(f(10,3)) # n = 2,这里n的默认值为2，如果不输入则以默认值为主 . 100 1000 . # 可变参数 def f(*x): print(x) return x f(1) f(&#39;a&#39;,&#39;b&#39;) f(1,2,3,[44,33]) print(type(f(&#39;a&#39;,&#39;b&#39;))) # 通过*来定义可变参数 # 默认会把可变参数传入一个元祖！ . (1,) (&#39;a&#39;, &#39;b&#39;) (1, 2, 3, [44, 33]) (&#39;a&#39;, &#39;b&#39;) &lt;class &#39;tuple&#39;&gt; . # global语句 → 把局部变量变为全局变量 def f(): global a a = &#39;呵呵哒&#39; print(&quot;函数内转为全局变量：%s&quot; % a) a = input(&#39;请输入一个数字：&#39;) print(&quot;输入变量值：%s&quot; % a) f() . # 匿名函数Lambda def fun(a,b,c): return a+b+c print(fun(2,3,4)) # def创建自定义函数，求和 f = lambda a,b,c:a+b+c print(f(2,3,4)) # lambda的主体是一个表达式，而不是一个代码块。 # lambda只有一行，仅仅能在lambda表达式中封装有限的逻辑进 . 9 9 . &#27169;&#22359;&#21019;&#24314;&#21450;import&#25351;&#20196;&#36816;&#29992; . # 模块路径问题 import pandas print(pandas.__file__) # 查看现有包所在路径，将自己创建的包存入改路径 import sys sys.path.append(&#39;C:/Users/Hjx/Desktop/&#39;) # 加载sys包，把新建的testmodel所在路径添加上 . /Users/yanggq/anaconda/lib/python3.6/site-packages/pandas/__init__.py . # 调用模块语句：import import testmodel2 print(testmodel2.f1(5)) print(testmodel2.f2([2,3,4,5,5,5,6,6,4,4,4,4],4)) print(testmodel2.f3(10,2,10)) # 直接用import调用模块，.f1()调用模块函数（方法） . # 简化模块名：import...as... import testmodel2 as tm2 print(tm2.f1(5)) # 简化模块名 . # 调用部分模块语句：From…import 语句 from testmodel2 import f2 print(f2([2,3,4,5,5,5,6,6,4,4,4,4],4)) #print(f3(10,2,10)) # 单独导入模块的部分功能，但无法使用其他未导入模块功能 . # python标准模块 —— random随机数 import random x = random.random() y = random.random() print(x,y*10) # random.random()随机生成一个[0:1)的随机数 m = random.randint(0,10) print(m) # random.randint()随机生成一个[0:10]的整数 st1 = random.choice(list(range(10))) st2 = random.choice(&#39;abcdnehgjla&#39;) print(st1,st2) # random.choice()随机获取()中的一个元素，()种必须是一个有序类型 lst = list(range(20)) sli = random.sample(lst,5) print(sli) # random.sample(a,b)随机获取a中指定b长度的片段，不会改变原序列 lst = [1,3,5,7,9,11,13] random.shuffle(lst) print(lst) # random.shuffle(list)将一个列表内的元素打乱 . 0.5911342737025251 4.5383035996358405 1 8 g [12, 9, 4, 2, 10] [1, 5, 7, 11, 9, 3, 13] . &#25991;&#20214;&#23545;&#35937;&#22768;&#26126;&#21450;&#22522;&#26412;&#25805;&#20316; . # os模块：系统模块 - 常用命令 import os # 导入模块 print(os.name) # 输出字符串指示正在使用的平台。如果是window 则用&#39;nt&#39;表示，对Linux/Unix用户，它是&#39;posix&#39;。 print(os.getcwd()) # 函数得到当前工作目录，即当前Python脚本工作的目录路径。 print(os.listdir()) # 返回指定目录下的所有文件和目录名。 #os.chdir(&#39;C: Users Hjx Desktop &#39; ) # 切换到目标路径 #print(os.getcwd()) #os.remove(&#39;text2.txt&#39;) # 删除一个文件 print(os.path.split(&#39;/Users/Hjx/Desktop/text.txt&#39;)) # 函数返回一个路径的目录名和文件名 print(os.path.exists(&#39;C: Users Hjx Desktop heheh.txt&#39;)) print(os.path.exists(&#39;C: Users Hjx Desktop &#39;)) # 用来检验给出的路径是否真地存在，这里不存在改文件故False，但路径存在故True . posix /Users/yanggq/dev/gist [&#39;python_basic.ipynb&#39;, &#39;python_request.ipynb&#39;] (&#39;/Users/Hjx/Desktop&#39;, &#39;text.txt&#39;) False False . # 文件写入 - write path = &#39;C: Users Hjx Desktop test_write.txt&#39; f = open(path, &#39;w&#39;, encoding = &#39;utf8&#39;) f.write(&#39;hello world!&#39;) # 执行后直接创建“test_write.txt”文件，并写入“hello world！” # 12代表输入了12个字符，但是文件内真的有写入吗？打开看看 . 12 . # 存储：pickle.dump(obj, file, [,protocol]) import pickle data = {&#39;a&#39;:[1,2,3,4], &#39;b&#39;:(&#39;string&#39;,&#39;abc&#39;), &#39;c&#39;:&#39;hello&#39;} print(data) # 创建一个字典变量data pic = open( &#39;C: Users Hjx Desktop data.pkl&#39;, &#39;wb&#39;) # 以二进制来存储：rb, wb, wrb, ab pickle.dump(data,pic) pic.close() # 将一个字典数据存成了pkl文件 . {&#39;a&#39;: [1, 2, 3, 4], &#39;b&#39;: (&#39;string&#39;, &#39;abc&#39;), &#39;c&#39;: &#39;hello&#39;} . # 读取：pickle.load(file) f = open( &#39;C: Users Hjx Desktop data.pkl&#39;, &#39;rb&#39;) st = pickle.load(f) print(st) # 直接读取pkl文件内的数据，该数据为一个字典 . {&#39;a&#39;: [1, 2, 3, 4], &#39;b&#39;: (&#39;string&#39;, &#39;abc&#39;), &#39;c&#39;: &#39;hello&#39;} .",
            "url": "https://data2api.com/jupyter/2020/03/15/basic.html",
            "relUrl": "/jupyter/2020/03/15/basic.html",
            "date": " • Mar 15, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://data2api.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://data2api.com/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://data2api.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}